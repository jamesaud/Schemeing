;#lang racket
;(require "parenthec.rkt")
;-------------------------------DEFINE RESGISTERS and PC----------------------------------------------
(define-program-counter pc)
(define-registers closure arg exp env v y k)
;---------------------------------DEFINE UNION------------------------------------------------------
(define-union ct
  (make-closure body^ env^))

(define-label apply-closure
    (union-case closure ct
      [(make-closure body^ env^) (begin [set! exp body^]
                                        [set! env (et_extend-env env^ arg)]
                                        (set! pc value-of-cps))]))

(define-union et
  (extend-env env^ y^)
  (empty-env))

(define-label apply-env
    (union-case env et
      [(extend-env env^ y^) 
       (if (zero? y)
           (begin (set! v y^)
             (set! pc apply-k))
           (begin (set! env env^)
                  (set! y (sub1 y))
                  (set! pc apply-env)))]
      [(empty-env) (error 'value-of-cps "unbound identifier")]))

(define-union kt
  (app-inner-k v^ k^)
  (app-outer-k rand env^ k^)
  (*-inner-k v^ k^)
  (*-outer-k x2^ env^ k^)
  (sub-inner-k k^)
  (zero-inner-k k^)
  (if-inner-k conseq^ alt^ env^ k^)
  (let-inner-k body^ env^ k^)
  (throw-inner-k v^)
  (throw-outer-k v^ env^)
  (empty-k dismount))
  
(define-label apply-k
   ; (begin
   ;   (display v)
   ;   (newline)
   ;   (display k)
   ;   (newline))
    (union-case k kt
      [(empty-k dismount) (dismount-trampoline dismount)]
      [(app-inner-k v^ k^) (begin (set! closure v^)
                                  (set! arg v)
                                  (set! k k^)
                                  (set! pc apply-closure))]
      [(app-outer-k rand^ env^ k^) (begin [set! exp rand^]     ;[exp ] [env ] [k ]
                                          [set! env env^]
                                          [set! k (kt_app-inner-k v k^)]
                                          (set! pc value-of-cps))]
      [(*-inner-k v^ k^) (begin [set! v (* v v^)]
                                [set! k k^]
                                (set! pc apply-k))]
      [(*-outer-k x2 env^ k^)(begin [set! exp x2]
                                    [set! env env^]
                                    [set! k (kt_*-inner-k v k^)]
                                    (set! pc value-of-cps))]
      [(sub-inner-k k^) (begin [set! v (sub1 v)]
                               [set! k k^]
                               (set! pc apply-k))]
      [(zero-inner-k k^) (begin [set! v (zero? v)]
                                [set! k k^]
                                (set! pc apply-k))]
      [(if-inner-k conseq^ alt^ env^ k^) (if v
                                             (begin [set! exp conseq^]
                                                    [set! env env^]
                                                    [set! k k^]
                                                    (set! pc value-of-cps))
                                             (begin [set! exp alt^]
                                                    [set! env env^]
                                                    [set! k k^]
                                                    (set! pc value-of-cps)))]
      [(let-inner-k body^ env^ k^) (begin [set! exp body^]
                                          [set! env (et_extend-env env^ v)]
                                          [set! k k^]
                                          (set! pc value-of-cps))]
      [(throw-inner-k v^) (begin [set! k v^]
                                 (set! pc apply-k))]
      [(throw-outer-k v^ env^) (begin [set! exp v^]
                                      [set! env env^]
                                      [set! k (kt_throw-inner-k v)]
                                      (set! pc value-of-cps))]
     ; [(empty-k) v]
      ))

;----------------CPS INTERPRETER----------------------
(define-label value-of-cps
    (union-case exp expr
      [(const exp^) (begin [set! v exp^]
                           (set! pc apply-k))]
      [(mult x1^ x2^)(begin [set! exp x1^]
                            [set! k (kt_*-outer-k x2^ env k)]
                            (set! pc value-of-cps))]
      [(sub1 x^)  (begin [set! exp x^]
                         [set! k (kt_sub-inner-k k)]
                         (set! pc value-of-cps))]
      [(zero x^)  (begin [set! exp x^]
                         [set! k (kt_zero-inner-k k)]
                         (set! pc value-of-cps))]
      [(if test^ conseq^ alt^) (begin [set! exp test^]
                                      [set! k (kt_if-inner-k conseq^ alt^ env k)]
                                      (set! pc value-of-cps))]
      [(letcc body^) (begin [set! exp body^]
                            [set! env (et_extend-env env k)] 
                            (set! pc value-of-cps))]
      [(throw k-exp^ v-exp^) (begin [set! exp k-exp^]
                                    [set! k (kt_throw-outer-k v-exp^ env)]
                                    (set! pc value-of-cps))]
      [(let e^ body^)(begin [set! exp e^]
                            [set! k (kt_let-inner-k body^ env k)]
                            (set! pc value-of-cps))]
      [(var exp^) (begin [set! y exp^]
                         (set! pc apply-env))]
      [(lambda body^) (begin [set! v (ct_make-closure body^ env)]
                             (apply-k))]
      [(app rator^ rand^) (begin [set! k (kt_app-outer-k rand^ env k)]
                                 [set! exp rator^]
                                 (set! pc value-of-cps))]))


;-------------------------A9------------------------------
(define-label main
     (begin
       (set! exp (expr_let 
                  (expr_lambda
                   (expr_lambda 
                    (expr_if
                     (expr_zero (expr_var 0))
                     (expr_const 1)
                     (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
                  (expr_mult
                   (expr_letcc
                    (expr_app
                     (expr_app (expr_var 1) (expr_var 1))
                     (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
                   (expr_const 5))))
       (set! env (et_empty-env))
       (set! pc value-of-cps)
       (mount-trampoline kt_empty-k k pc)
       (printf "Fact 5: ~s\n" v)))

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

;(main)
;mult
;zero
;const
;lambda
;app